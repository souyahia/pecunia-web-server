sudo: required

language: node_js

node_js:
  - 13.14.0

services:
    - docker

env: 
    global:
        - DOCKER_COMPOSE_VERSION=1.26.2

before_install:
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin

script:
  - docker version
  - docker-compose version

# before_install:
#     # list docker-engine versions
#     - apt-cache madison docker-ce
    
#     # upgrade docker-engine to specific version
#     - sudo apt-get -o Dpkg::Options::="--force-confnew" install -y docker-ce=${DOCKER_VERSION}

#     # reinstall docker-compose at specific version
#     - sudo rm -f /usr/local/bin/docker-compose
#     - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
#     - chmod +x docker-compose
#     - sudo mv docker-compose /usr/local/bin

# script:
#     - docker version
#     - docker-compose version













# # language: node_js
# # env:
# #   DOCKER_COMPOSE_VERSION: 1.26.2
# # node_js:
# #   - 13.14.0

# # services:
# #   - docker

# # before_script:
# #   - sudo apt-get update
# #   - sudo apt-get install docker-compose
# #   - sudo apt-get install -o Dpkg::Options::="--force-confold" --force-yes -y docker-engine

# # script:
# #   - docker-compose --version
# #   - docker-compose -f ./docker-compose.test.yaml up --abort-on-container-exit --exit-code-from pecunia-web-server


#   env:
#     # You may want to update this to whatever the latest version is, or keep it
#     # the same as your local machines. However, I have only tested it with 1.8.0+.
#     # There should be a time in the future when this is not necessary - it is
#     # explained in more detail below.
#     DOCKER_COMPOSE_VERSION: 1.8.0
#   before_install:
#     # update is required to update the repositories to see the new packages for
#     # Docker.
#     - sudo apt-get update
#   # Now we can install the newer docker-engine which is required for the newer
#     # docker-composer we will install next. The messy options are to force it to
#     # be non-interactive (normally it asks you a bunch of config questions).
#     - sudo apt-get install -o Dpkg::Options::="--force-confold" --force-yes -y docker-engine
#   # Print out the current docker-compose version. Once this reports 1.6+ then we
#     # do not need the following steps.
#     - docker-compose --version
#   # As of the writing of this script Travis has docker-compose v1.4.2, we need
#     # to update it to 1.8+. $DOCKER_COMPOSE_VERSION is provide from the `env`
#     # above.
#     - sudo rm /usr/local/bin/docker-compose
#     - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
#     - chmod +x docker-compose
#     - sudo mv docker-compose /usr/local/bin
#   # Check that docker-compose is now running the latest version (or at least the
#     # one we specified). This is not to be confused with the version we printed
#     # before doing the update.
#     - docker-compose --version
#   # Setup your application stack. You may need to tweak these commands if you
#     # doing out-of-the-ordinary docker-compose builds.
#     - docker-compose -f ./docker-compose.test.yaml up --abort-on-container-exit --exit-code-from pecunia-web-server
#   # You will want this for logging. If one of your containers does not build for
#     # whatever reason it's best to report that now before your tests start
#     # otherwise it can be really tricky to debug why tests are failing sometimes.
#     - docker ps